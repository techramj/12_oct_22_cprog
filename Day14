
int max(int* ptr, int size)
{
	int maxNum = ptr[0];

	for (int i = 1; i < 5; i++) {
		if (maxNum < ptr[i]) {
			maxNum = ptr[i];
		}
	}
	return maxNum;
}

int min(int* ptr, int size)
{
	int minNum = ptr[0];

	for (int i = 1; i < 5; i++) {
		if (minNum > ptr[i]) {
			minNum = ptr[i];
		}
	}
	return minNum;
}


void minAndMax(int* ptr, int size, int* minValue, int* maxValue)
{
	int maxNum = ptr[0];
	int minNum = ptr[0];
	for (int i = 1; i < 5; i++) {
		if (maxNum < ptr[i]) {
			maxNum = ptr[i];
		}

		if (minNum > ptr[i]) {
			minNum = ptr[i];
		}

		*minValue = minNum;
		*maxValue = maxNum;	
	}

}


void main()
{
	int arr[5];

	accept(arr, 5);

	printf(" Number entered: ");
	display(arr, 5);
    

	//logic to find 2 hightest number
	//10 2 34 21 6

	int max;
	int secondHighest;

	if (arr[0] > arr[1]) {
		max = arr[0];
		secondHighest = arr[1];
	}
	else {
		max = arr[1];
		secondHighest = arr[0];
	}


	for (int i = 2; i < 5; i++) {
		if (arr[i] > max) {
			secondHighest = max;
			max = arr[i];
		}
		else if(arr[i]> secondHighest) {
			secondHighest = arr[i];
		}
	}

	printf("\nsecond highest = % d", secondHighest);

}


Assignment:

//sorting algorithm
array of size n, each element will be between 0 to .
printf the no of occurence of number 1- 9

0	2	1	3	5	6	8	3	3	4	5	5	4	5	4	5	4
																															
0	1															
2	1															
3	3															
4	3															
5	5															

